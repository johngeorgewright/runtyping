import { array, boolean, check, InferOutput, is, length, minLength, number, pipe, string, unknown } from 'valibot';

// This file is generated by runtyping (https://github.com/johngeorgewright/runtyping).
// Manual changes might be lost - proceed with caution!
export const A = pipe(array(unknown()), minLength(1), check(data => is(string(), data[0]) && is(pipe(array(string()), length(data.slice(1, undefined).length)), data.slice(1, undefined))));

export type A = InferOutput<typeof A>;

export const B = pipe(array(unknown()), minLength(2), check(data => is(string(), data[0]) && is(number(), data[1]) && is(pipe(array(number()), length(data.slice(2, undefined).length)), data.slice(2, undefined))));

export type B = InferOutput<typeof B>;

export const C = pipe(array(unknown()), minLength(1), check(data => is(pipe(array(string()), length(data.slice(0, -1).length)), data.slice(0, -1)) && is(number(), data[data.length - 1])));

export type C = InferOutput<typeof C>;

export const D = pipe(array(unknown()), minLength(2), check(data => is(string(), data[0]) && is(pipe(array(string()), length(data.slice(1, -1).length)), data.slice(1, -1)) && is(string(), data[data.length - 1])));

export type D = InferOutput<typeof D>;

export const E = pipe(array(unknown()), minLength(5), check(data => is(string(), data[0]) && is(number(), data[1]) && is(boolean(), data[2]) && is(pipe(array(string()), length(data.slice(3, -2).length)), data.slice(3, -2)) && is(number(), data[data.length - 2]) && is(boolean(), data[data.length - 1])));

export type E = InferOutput<typeof E>;
