import { array, custom, GenericSchema, InferOutput, intersect, lazy, literal, null as Null, number, object, optional, record, string, undefined as Undefined, union } from 'valibot';
import { JSONSchema7 as _JSONSchema7, JSONSchema7Array as _JSONSchema7Array, JSONSchema7Definition as _JSONSchema7Definition, JSONSchema7Object as _JSONSchema7Object, JSONSchema7Type as _JSONSchema7Type } from 'json-schema/index';

// This file is generated by runtyping (https://github.com/johngeorgewright/runtyping).
// Manual changes might be lost - proceed with caution!
export const JSONSchema7Definition: GenericSchema<_JSONSchema7Definition> = lazy(() => union([literal(false), literal(true), JSONSchema7]));

export type JSONSchema7Definition = InferOutput<typeof JSONSchema7Definition>;

export const JSONSchema7TypeName = union([literal("string"), literal("number"), literal("boolean"), literal("object"), literal("integer"), literal("array"), literal("null")]);

export type JSONSchema7TypeName = InferOutput<typeof JSONSchema7TypeName>;

export const JSONSchema7Object: GenericSchema<_JSONSchema7Object> = lazy(() => intersect([record(string(), JSONSchema7Type), custom((data) => !Array.isArray(data), "Unexpected array")]));

export type JSONSchema7Object = InferOutput<typeof JSONSchema7Object>;

export const JSONSchema7Array: GenericSchema<_JSONSchema7Array> = lazy(() => array(JSONSchema7Type));

export type JSONSchema7Array = InferOutput<typeof JSONSchema7Array>;

export const JSONSchema7Type: GenericSchema<_JSONSchema7Type> = lazy(() => union([Null(), string(), number(), literal(false), literal(true), JSONSchema7Object, JSONSchema7Array]));

export type JSONSchema7Type = InferOutput<typeof JSONSchema7Type>;

export const JSONSchema7: GenericSchema<_JSONSchema7> = lazy(() => object({ $id: optional(union([string(), Undefined()])), $ref: optional(union([string(), Undefined()])), $schema: optional(union([string(), Undefined()])), $comment: optional(union([string(), Undefined()])), $defs: optional(union([intersect([record(string(), JSONSchema7Definition), custom((data) => !Array.isArray(data), "Unexpected array")]), Undefined()])), type: optional(union([literal("string"), literal("number"), literal("boolean"), literal("object"), literal("integer"), literal("array"), literal("null"), array(JSONSchema7TypeName), Undefined()])), enum: optional(union([array(JSONSchema7Type), Undefined()])), const: optional(union([Null(), string(), number(), literal(false), literal(true), JSONSchema7Object, JSONSchema7Array, Undefined()])), multipleOf: optional(union([number(), Undefined()])), maximum: optional(union([number(), Undefined()])), exclusiveMaximum: optional(union([number(), Undefined()])), minimum: optional(union([number(), Undefined()])), exclusiveMinimum: optional(union([number(), Undefined()])), maxLength: optional(union([number(), Undefined()])), minLength: optional(union([number(), Undefined()])), pattern: optional(union([string(), Undefined()])), items: optional(union([literal(false), literal(true), JSONSchema7, array(JSONSchema7Definition), Undefined()])), additionalItems: optional(union([literal(false), literal(true), JSONSchema7, Undefined()])), maxItems: optional(union([number(), Undefined()])), minItems: optional(union([number(), Undefined()])), uniqueItems: optional(union([literal(false), literal(true), Undefined()])), contains: optional(union([literal(false), literal(true), JSONSchema7, Undefined()])), maxProperties: optional(union([number(), Undefined()])), minProperties: optional(union([number(), Undefined()])), required: optional(union([array(string()), Undefined()])), properties: optional(union([intersect([record(string(), JSONSchema7Definition), custom((data) => !Array.isArray(data), "Unexpected array")]), Undefined()])), patternProperties: optional(union([intersect([record(string(), JSONSchema7Definition), custom((data) => !Array.isArray(data), "Unexpected array")]), Undefined()])), additionalProperties: optional(union([literal(false), literal(true), JSONSchema7, Undefined()])), dependencies: optional(union([intersect([record(string(), union([literal(false), literal(true), JSONSchema7, array(string())])), custom((data) => !Array.isArray(data), "Unexpected array")]), Undefined()])), propertyNames: optional(union([literal(false), literal(true), JSONSchema7, Undefined()])), if: optional(union([literal(false), literal(true), JSONSchema7, Undefined()])), then: optional(union([literal(false), literal(true), JSONSchema7, Undefined()])), else: optional(union([literal(false), literal(true), JSONSchema7, Undefined()])), allOf: optional(union([array(JSONSchema7Definition), Undefined()])), anyOf: optional(union([array(JSONSchema7Definition), Undefined()])), oneOf: optional(union([array(JSONSchema7Definition), Undefined()])), not: optional(union([literal(false), literal(true), JSONSchema7, Undefined()])), format: optional(union([string(), Undefined()])), contentMediaType: optional(union([string(), Undefined()])), contentEncoding: optional(union([string(), Undefined()])), definitions: optional(union([intersect([record(string(), JSONSchema7Definition), custom((data) => !Array.isArray(data), "Unexpected array")]), Undefined()])), title: optional(union([string(), Undefined()])), description: optional(union([string(), Undefined()])), default: optional(union([Null(), string(), number(), literal(false), literal(true), JSONSchema7Object, JSONSchema7Array, Undefined()])), readOnly: optional(union([literal(false), literal(true), Undefined()])), writeOnly: optional(union([literal(false), literal(true), Undefined()])), examples: optional(union([Null(), string(), number(), literal(false), literal(true), JSONSchema7Object, JSONSchema7Array, Undefined()])), }));

export type JSONSchema7 = InferOutput<typeof JSONSchema7>;

export const A = object({ foo: string(), schema: JSONSchema7, });

export type A = InferOutput<typeof A>;
