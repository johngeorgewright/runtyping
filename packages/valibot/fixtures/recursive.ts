import { array, GenericSchema, InferOutput, lazy, object, string, union } from 'valibot';
import { A as _A, B as _B } from '../../../.yarn/__virtual__/@runtyping-test-type-writers-virtual-f1a80c3a62/1/packages/test-type-writers/fixtures/source/recursive';

// This file is generated by runtyping (https://github.com/johngeorgewright/runtyping).
// Manual changes might be lost - proceed with caution!
export const A: GenericSchema<_A> = lazy(() => object({ recurse: union([string(), A]), }));

export type A = InferOutput<typeof A>;

export const B: GenericSchema<_B> = lazy(() => object({ recurse: array(B), }));

export type B = InferOutput<typeof B>;
