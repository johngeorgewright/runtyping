import { GenericSchema, InferOutput, intersect, number, object, string, union } from 'valibot';

// This file is generated by runtyping (https://github.com/johngeorgewright/runtyping).
// Manual changes might be lost - proceed with caution!
export const A = <T extends any,>(T: GenericSchema<T>,) => object({ type: T, });

export type A<T> = InferOutput<ReturnType<typeof A<T>>>;

export const B = <T extends string,>(T: GenericSchema<T>,) => object({ type: T, });

export type B<T extends string> = InferOutput<ReturnType<typeof B<T>>>;

export const C = <T extends any,>(T: GenericSchema<T>,) => union([string(), T]);

export type C<T> = InferOutput<ReturnType<typeof C<T>>>;

export const D = <T extends number,>(T: GenericSchema<T>,) => object({ type: T, });

export type D<T extends number> = InferOutput<ReturnType<typeof D<T>>>;

export const E = object({ foo: string(), });

export type E = InferOutput<typeof E>;

export const F = <T extends InferOutput<typeof E>,>(T: GenericSchema<T>,) => object({ type: T, });

export type F<T extends E> = InferOutput<ReturnType<typeof F<T>>>;

export const G = object({ abc: A(object({ data: string(), }),), });

export type G = InferOutput<typeof G>;

export const Test = <T extends any,>(T: GenericSchema<T>,) => intersect([T, object({ count: number(), })]);

export type Test<T> = InferOutput<ReturnType<typeof Test<T>>>;

export const Foo = object({ abc: Test(object({ data: string(), }),), });

export type Foo = InferOutput<typeof Foo>;
